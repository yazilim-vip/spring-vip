package vip.yazilim.libs.springvip.bean.impl

import net.bytebuddy.ByteBuddy
import net.bytebuddy.description.annotation.AnnotationDescription
import net.bytebuddy.dynamic.DynamicType
import net.bytebuddy.implementation.MethodDelegation
import org.springframework.stereotype.Component
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RestController
import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping
import vip.yazilim.libs.springvip.bean.IGenericRestFactory
import vip.yazilim.libs.springvip.util.generic.rest.AGenericRest
import vip.yazilim.libs.springvip.util.generic.rest.AutoGeneratedRest
import vip.yazilim.libs.springvip.util.generic.rest.GenericCrudMethods.*
import vip.yazilim.libs.springvip.util.generic.rest.GenericRest
import java.lang.reflect.Modifier
import javax.servlet.http.HttpServletRequest
import javax.servlet.http.HttpServletResponse

/**
 * Default  RestResponse Builder Implementation
 */
@Component
class GenericRestFactory(
        private val handlerMapping: RequestMappingHandlerMapping,
) : IGenericRestFactory {

    override fun <E, ID, T : AGenericRest<E, ID>> buildProxyRestController(restControllerBean: T, genericRest: GenericRest): Any {

        /*
        -------------------------------
        | DEFINE NEW CONTROLLER CLASS
        -------------------------------
         */
        var builder: DynamicType.Builder<Any?> = ByteBuddy()
                .subclass(Any::class.java)
                .name("${restControllerBean::class.simpleName}GenericController")
                .annotateType(AnnotationDescription.Builder
                        .ofType(RestController::class.java) // don't use `request` mapping here
                        .build()
                )
                .annotateType(AnnotationDescription.Builder
                        .ofType(AutoGeneratedRest::class.java) // don't use `request` mapping here
                        .build()
                )


        /*
        -------------------------------
        | BEGIN DEFINE CUSTOM METHODS
        -------------------------------
         */
        genericRest.methods.forEach {
            val methodBuilder = builder.defineMethod(it.methodName, Any::class.java, Modifier.PUBLIC);
            if (it == GET_ALL || it == DELETE_ALL) {
                builder = methodBuilder.withParameter(HttpServletRequest::class.java)
                        .withParameter(HttpServletResponse::class.java)
                        .intercept(MethodDelegation.to(restControllerBean))
            } else if (it == CREATE || it == UPDATE || it == SAVE || it == DELETE) {
                builder = methodBuilder
                        .withParameter(HttpServletRequest::class.java)
                        .withParameter(HttpServletResponse::class.java)
                        .withParameter(restControllerBean.classOfEntity.java)
                        .annotateParameter(AnnotationDescription.Builder
                                .ofType(RequestBody::class.java)
                                .build())
                        .intercept(MethodDelegation.to(restControllerBean))
            } else if (it == GET_BY_ID || it == DELETE_BY_ID) {
                builder = methodBuilder
                        .withParameter(HttpServletRequest::class.java)
                        .withParameter(HttpServletResponse::class.java)
                        .withParameter(restControllerBean.classOfId.java)
                        .annotateParameter(AnnotationDescription.Builder
                                .ofType(PathVariable::class.java)
                                .define("name", "id")
                                .build())
                        .intercept(MethodDelegation.to(restControllerBean))

            }
        }

        /*
        -------------------------------
        | CREATE NEW CONTROLLER
        -------------------------------
         */
        return builder.make()
                .load(restControllerBean.javaClass.classLoader)
                .loaded
                .newInstance()!!
    }
}